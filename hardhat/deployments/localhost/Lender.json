{
  "address": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract StableCoin",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InadequeteTokenBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IncorrectETHAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WithdrawLimitExceeded",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "collateralETHDeposited",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountUSDMinted",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "collateralETHWithdraw",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountUSDBurned",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountToDeposit",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "repaymentAmount",
          "type": "uint256"
        }
      ],
      "name": "estimateCollateralAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "collateralAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "depositAmount",
          "type": "uint256"
        }
      ],
      "name": "estimateTokenAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEthUSDPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "getLender",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "collateralETH",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "debtAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct ILender.LenderEntity",
          "name": "lender",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract StableCoin",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "repaymentAmount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xd56362ec35adec565c36718aff992d22f3c183669404239817a5f23f9cd4edb3",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
    "transactionIndex": 0,
    "gasUsed": "1294450",
    "logsBloom": "0x
    "blockHash": "0xf29f86263505dffb9b9bbf1c4eddb569e6c8728736d70f0eee53402fd4382352",
    "transactionHash": "0xd56362ec35adec565c36718aff992d22f3c183669404239817a5f23f9cd4edb3",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 3,
        "transactionHash": "0xd56362ec35adec565c36718aff992d22f3c183669404239817a5f23f9cd4edb3",
        "address": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xf29f86263505dffb9b9bbf1c4eddb569e6c8728736d70f0eee53402fd4382352"
      }
    ],
    "blockNumber": 3,
    "cumulativeGasUsed": "1294450",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "b2aff70c1eec98f3d9821c0aeec04701",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract StableCoin\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InadequeteTokenBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncorrectETHAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WithdrawLimitExceeded\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralETHDeposited\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountUSDMinted\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralETHWithdraw\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountUSDBurned\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToDeposit\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"repaymentAmount\",\"type\":\"uint256\"}],\"name\":\"estimateCollateralAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"}],\"name\":\"estimateTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEthUSDPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getLender\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"collateralETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct ILender.LenderEntity\",\"name\":\"lender\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract StableCoin\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"repaymentAmount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"deposit(uint256)\":{\"params\":{\"amountToDeposit\":\"Ether sent to the contract by the user\"}},\"estimateCollateralAmount(uint256)\":{\"params\":{\"repaymentAmount\":\"the amount of stable coin that would be repaid\"},\"returns\":{\"collateralAmount\":\"the estimated amount of a vault's collateral that would be returned \"}},\"estimateTokenAmount(uint256)\":{\"params\":{\"depositAmount\":\"the amount of ETH that would be deposited\"},\"returns\":{\"tokenAmount\":\" the estimated amount of stablecoin that would be minted\"}},\"getLender(address)\":{\"params\":{\"userAddress\":\"fetches details of this address\"},\"returns\":{\"lender\":\"returns the lender's values\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdraw(uint256)\":{\"params\":{\"repaymentAmount\":\"The amount the user is paying back to the contract to redeem collateral\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"deposit(uint256)\":{\"notice\":\"Let's user to deposit ETH collateral in exchange for stablecoin\"},\"estimateCollateralAmount(uint256)\":{\"notice\":\"Returns an estimate of how much collateral could be withdrawn for a given amount of stablecoin\"},\"estimateTokenAmount(uint256)\":{\"notice\":\"Returns an estimate on how much stable coin could be minted at the current rate\"},\"getLender(address)\":{\"notice\":\"gets details of each lender\"},\"withdraw(uint256)\":{\"notice\":\"Let's users withdraw collateral intially submitted\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Lender.sol\":\"Lender\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x24b04b8aacaaf1a4a0719117b29c9c3647b1f479c5ac2a60f5ff1bb6d839c238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/Lender.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/ILender.sol\\\";\\nimport \\\"./implementations/StableCoin.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n// oracle pricing\\n\\nerror IncorrectETHAmount();\\nerror WithdrawLimitExceeded();\\nerror InadequeteTokenBalance();\\n\\ncontract Lender is ILender, Ownable {\\n    mapping(address => LenderEntity) lenders;\\n    StableCoin public token;\\n\\n    AggregatorV3Interface public priceFeed;\\n\\n    constructor(StableCoin _token, address priceFeedAddress) {\\n        token = _token;\\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\\n        // oracle = _oracle\\n    }\\n\\n    /**\\n     @notice Let's user to deposit ETH collateral in exchange for stablecoin\\n     @param amountToDeposit Ether sent to the contract by the user\\n     */\\n    function deposit(uint256 amountToDeposit) external payable override {\\n        if (amountToDeposit != msg.value) {\\n            revert IncorrectETHAmount();\\n        }\\n        uint256 amountToMint = PriceConverter.getConversionRate(\\n            msg.value,\\n            priceFeed\\n        );\\n        token.mint(msg.sender, amountToMint);\\n        lenders[msg.sender].collateralETH += amountToDeposit;\\n        lenders[msg.sender].debtAmount += amountToMint;\\n        emit Deposit(amountToDeposit, amountToMint / 10**18);\\n    }\\n\\n    /**\\n     @notice Let's users withdraw collateral intially submitted\\n     @param repaymentAmount The amount the user is paying back to the contract to redeem collateral\\n     */\\n    function withdraw(uint256 repaymentAmount) external override {\\n        if (repaymentAmount > lenders[msg.sender].debtAmount) {\\n            revert WithdrawLimitExceeded();\\n        }\\n        if (token.balanceOf(msg.sender) < repaymentAmount) {\\n            revert InadequeteTokenBalance();\\n        }\\n        uint256 amountToWithdraw = (repaymentAmount * 10**18) /\\n            PriceConverter.getConversionRate(10**18, priceFeed);\\n        token.burn(msg.sender, repaymentAmount);\\n        lenders[msg.sender].collateralETH -= amountToWithdraw;\\n        lenders[msg.sender].debtAmount -= repaymentAmount;\\n        payable(msg.sender).transfer(amountToWithdraw);\\n        emit Withdraw(amountToWithdraw, repaymentAmount);\\n    }\\n\\n    /**\\n     @notice gets details of each lender\\n     @param userAddress fetches details of this address\\n     @return lender returns the lender's values\\n     */\\n    function getLender(address userAddress)\\n        external\\n        view\\n        override\\n        returns (LenderEntity memory lender)\\n    {\\n        return lenders[userAddress];\\n    }\\n\\n    /**\\n    @notice Returns an estimate of how much collateral could be withdrawn for a given amount of stablecoin\\n    @param repaymentAmount  the amount of stable coin that would be repaid\\n    @return collateralAmount the estimated amount of a vault's collateral that would be returned \\n     */\\n    function estimateCollateralAmount(uint256 repaymentAmount)\\n        external\\n        view\\n        override\\n        returns (uint256 collateralAmount)\\n    {\\n        return\\n            repaymentAmount /\\n            PriceConverter.getConversionRate(10**18, priceFeed);\\n    }\\n\\n    /**\\n    @notice Returns an estimate on how much stable coin could be minted at the current rate\\n    @param depositAmount the amount of ETH that would be deposited\\n    @return tokenAmount  the estimated amount of stablecoin that would be minted\\n     */\\n    function estimateTokenAmount(uint256 depositAmount)\\n        external\\n        view\\n        override\\n        returns (uint256 tokenAmount)\\n    {\\n        return depositAmount * getEthUSDPrice();\\n    }\\n\\n    function getEthUSDPrice() public view returns (uint256) {\\n        uint256 price18 = PriceConverter.getConversionRate(10**18, priceFeed);\\n        return price18;\\n    }\\n\\n    function getToken() external view returns (address) {\\n        return address(token);\\n    }\\n\\n    receive() external payable {}\\n\\n    fallback() external payable {}\\n}\\n\",\"keccak256\":\"0x2d78fb63aa06857bff264f97ba8987baed5ee0e38d6a0e92b09bd8b54af3aa19\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n// Why is this a library and not abstract?\\n// Why not an interface?\\nlibrary PriceConverter {\\n    // We could make this public, but then we'd have to deploy it\\n    function getPrice(AggregatorV3Interface priceFeed)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        // Rinkeby ETH / USD Address\\n        // https://docs.chain.link/docs/ethereum-addresses/\\n        // AggregatorV3Interface priceFeed = AggregatorV3Interface(\\n        //     0x8A753747A1Fa494EC906cE90E9f37563A8AF630e\\n        // );\\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\\n        // ETH/USD rate in 18 digit\\n        return uint256(answer * 10000000000);\\n    }\\n\\n    // 1000000000\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\n        // the actual ETH/USD conversion rate, after adjusting the extra 0s.\\n        return ethAmountInUsd;\\n    }\\n}\\n\",\"keccak256\":\"0x222f8b912c930f71a2d5b21cc91409442039a2fd5e7d3c53a901751ada1cd559\",\"license\":\"MIT\"},\"contracts/implementations/StableCoin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../interfaces/IStableCoin.sol\\\";\\n\\ncontract StableCoin is ERC20, IStableCoin, Ownable {\\n    constructor() ERC20(\\\"YangitUSD\\\", \\\"YUSD\\\") {}\\n\\n    function mint(address account, uint256 amount)\\n        external\\n        override\\n        onlyOwner\\n        returns (bool)\\n    {\\n        _mint(account, amount);\\n        return true;\\n    }\\n\\n    function burn(address account, uint256 amount)\\n        external\\n        override\\n        onlyOwner\\n        returns (bool)\\n    {\\n        _burn(account, amount);\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x4a36bce2c5dcde30166e9245463f785c1d6ce08057e4c2e8183e05f5cc11f558\",\"license\":\"MIT\"},\"contracts/interfaces/ILender.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\ninterface ILender {\\n    struct LenderEntity {\\n        uint256 collateralETH;\\n        uint256 debtAmount;\\n    }\\n\\n    event Deposit(uint256 collateralETHDeposited, uint256 amountUSDMinted);\\n    event Withdraw(uint256 collateralETHWithdraw, uint256 amountUSDBurned);\\n\\n    /**\\n    @notice Allows a user to deposit ETH collateral in exchange for some amount of stablecoin\\n    @param amountToDeposit  The amount of ether the user sent in the transaction\\n     */\\n    function deposit(uint256 amountToDeposit) external payable;\\n\\n    /**\\n    @notice Allows a user to withdraw up to 100% of the collateral they have on deposit\\n    @dev This cannot allow a user to withdraw more than they put in\\n    @param repaymentAmount  the amount of stablecoin that a user is repaying to redeem their collateral for.\\n     */\\n    function withdraw(uint256 repaymentAmount) external;\\n\\n    /**\\n    @notice Returns the details of a vault\\n    @param userAddress  the address of the vault owner\\n    @return lender the vault details\\n     */\\n    function getLender(address userAddress)\\n        external\\n        view\\n        returns (LenderEntity memory lender);\\n\\n    /**\\n    @notice Returns an estimate of how much collateral could be withdrawn for a given amount of stablecoin\\n    @param repaymentAmount  the amount of stable coin that would be repaid\\n    @return collateralAmount the estimated amount of a vault's collateral that would be returned \\n     */\\n    function estimateCollateralAmount(uint256 repaymentAmount)\\n        external\\n        view\\n        returns (uint256 collateralAmount);\\n\\n    /**\\n    @notice Returns an estimate on how much stable coin could be minted at the current rate\\n    @param depositAmount the amount of ETH that would be deposited\\n    @return tokenAmount  the estimated amount of stablecoin that would be minted\\n     */\\n    function estimateTokenAmount(uint256 depositAmount)\\n        external\\n        view\\n        returns (uint256 tokenAmount);\\n}\\n\",\"keccak256\":\"0xd342219c85814dcb498d38191fbfa8c5ddb602a3dbfafee8626683414a4022aa\",\"license\":\"MIT\"},\"contracts/interfaces/IStableCoin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\ninterface IStableCoin {\\n    function mint(address account, uint256 amount) external returns (bool);\\n\\n    function burn(address account, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x3acf7bd46819a32701115f7608b57169164b1cd7222dacb969fcbad0ab640045\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620017ca380380620017ca83398181016040528101906200003791906200025c565b620000576200004b620000e160201b60201c565b620000e960201b60201c565b81600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050620002a3565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001df82620001b2565b9050919050565b6000620001f382620001d2565b9050919050565b6200020581620001e6565b81146200021157600080fd5b50565b6000815190506200022581620001fa565b92915050565b6200023681620001d2565b81146200024257600080fd5b50565b60008151905062000256816200022b565b92915050565b60008060408385031215620002765762000275620001ad565b5b6000620002868582860162000214565b9250506020620002998582860162000245565b9150509250929050565b61151780620002b36000396000f3fe6080604052600436106100ab5760003560e01c8063741bef1a11610064578063741bef1a146101d65780638da5cb5b14610201578063b6b55f251461022c578063d84549d714610248578063f2fde38b14610273578063fc0c546a1461029c576100b2565b80631b05ab79146100b457806321df0da7146100f15780632e1a7d4d1461011c578063527d59061461014557806356bfdaf514610182578063715018a6146101bf576100b2565b366100b257005b005b3480156100c057600080fd5b506100db60048036038101906100d69190610d41565b6102c7565b6040516100e89190610d7d565b60405180910390f35b3480156100fd57600080fd5b506101066102e3565b6040516101139190610dd9565b60405180910390f35b34801561012857600080fd5b50610143600480360381019061013e9190610d41565b61030d565b005b34801561015157600080fd5b5061016c60048036038101906101679190610e20565b6106a9565b6040516101799190610e8b565b60405180910390f35b34801561018e57600080fd5b506101a960048036038101906101a49190610d41565b610716565b6040516101b69190610d7d565b60405180910390f35b3480156101cb57600080fd5b506101d461075e565b005b3480156101e257600080fd5b506101eb610772565b6040516101f89190610f05565b60405180910390f35b34801561020d57600080fd5b50610216610798565b6040516102239190610dd9565b60405180910390f35b61024660048036038101906102419190610d41565b6107c1565b005b34801561025457600080fd5b5061025d6109dc565b60405161026a9190610d7d565b60405180910390f35b34801561027f57600080fd5b5061029a60048036038101906102959190610e20565b610a1c565b005b3480156102a857600080fd5b506102b1610aa0565b6040516102be9190610f41565b60405180910390f35b60006102d16109dc565b826102dc9190610f8b565b9050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154811115610389576040517f14f310c900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016103e59190610dd9565b60206040518083038186803b1580156103fd57600080fd5b505afa158015610411573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104359190610ffa565b101561046d576040517f0707d44600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006104a3670de0b6b3a7640000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610ac6565b670de0b6b3a7640000836104b79190610f8b565b6104c19190611056565b9050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639dc29fac33846040518363ffffffff1660e01b8152600401610520929190611087565b602060405180830381600087803b15801561053a57600080fd5b505af115801561054e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061057291906110e8565b5080600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160008282546105c59190611115565b9250508190555081600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101600082825461061e9190611115565b925050819055503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015801561066b573d6000803e3d6000fd5b507f56ca301a9219608c91e7bcee90e083c19671d2cdcc96752c7af291cee5f9c8c8818360405161069d929190611149565b60405180910390a15050565b6106b1610cec565b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806040016040529081600082015481526020016001820154815250509050919050565b600061074c670de0b6b3a7640000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610ac6565b826107579190611056565b9050919050565b610766610b02565b6107706000610b80565b565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b3481146107fa576040517f201c04ab00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061082834600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610ac6565b9050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1933836040518363ffffffff1660e01b8152600401610887929190611087565b602060405180830381600087803b1580156108a157600080fd5b505af11580156108b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d991906110e8565b5081600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001600082825461092c9190611172565b9250508190555080600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160008282546109859190611172565b925050819055507fa3af609bf46297028ce551832669030f9effef2b02606d02cbbcc40fe6b47c5582670de0b6b3a7640000836109c29190611056565b6040516109d0929190611149565b60405180910390a15050565b600080610a13670de0b6b3a7640000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610ac6565b90508091505090565b610a24610b02565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610a94576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a8b9061124b565b60405180910390fd5b610a9d81610b80565b50565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080610ad283610c44565b90506000670de0b6b3a76400008583610aeb9190610f8b565b610af59190611056565b9050809250505092915050565b610b0a610ce4565b73ffffffffffffffffffffffffffffffffffffffff16610b28610798565b73ffffffffffffffffffffffffffffffffffffffff1614610b7e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b75906112b7565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015610c8d57600080fd5b505afa158015610ca1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc5919061134f565b5050509150506402540be40081610cdc91906113ca565b915050919050565b600033905090565b604051806040016040528060008152602001600081525090565b600080fd5b6000819050919050565b610d1e81610d0b565b8114610d2957600080fd5b50565b600081359050610d3b81610d15565b92915050565b600060208284031215610d5757610d56610d06565b5b6000610d6584828501610d2c565b91505092915050565b610d7781610d0b565b82525050565b6000602082019050610d926000830184610d6e565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610dc382610d98565b9050919050565b610dd381610db8565b82525050565b6000602082019050610dee6000830184610dca565b92915050565b610dfd81610db8565b8114610e0857600080fd5b50565b600081359050610e1a81610df4565b92915050565b600060208284031215610e3657610e35610d06565b5b6000610e4484828501610e0b565b91505092915050565b610e5681610d0b565b82525050565b604082016000820151610e726000850182610e4d565b506020820151610e856020850182610e4d565b50505050565b6000604082019050610ea06000830184610e5c565b92915050565b6000819050919050565b6000610ecb610ec6610ec184610d98565b610ea6565b610d98565b9050919050565b6000610edd82610eb0565b9050919050565b6000610eef82610ed2565b9050919050565b610eff81610ee4565b82525050565b6000602082019050610f1a6000830184610ef6565b92915050565b6000610f2b82610ed2565b9050919050565b610f3b81610f20565b82525050565b6000602082019050610f566000830184610f32565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610f9682610d0b565b9150610fa183610d0b565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610fda57610fd9610f5c565b5b828202905092915050565b600081519050610ff481610d15565b92915050565b6000602082840312156110105761100f610d06565b5b600061101e84828501610fe5565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061106182610d0b565b915061106c83610d0b565b92508261107c5761107b611027565b5b828204905092915050565b600060408201905061109c6000830185610dca565b6110a96020830184610d6e565b9392505050565b60008115159050919050565b6110c5816110b0565b81146110d057600080fd5b50565b6000815190506110e2816110bc565b92915050565b6000602082840312156110fe576110fd610d06565b5b600061110c848285016110d3565b91505092915050565b600061112082610d0b565b915061112b83610d0b565b92508282101561113e5761113d610f5c565b5b828203905092915050565b600060408201905061115e6000830185610d6e565b61116b6020830184610d6e565b9392505050565b600061117d82610d0b565b915061118883610d0b565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156111bd576111bc610f5c565b5b828201905092915050565b600082825260208201905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006112356026836111c8565b9150611240826111d9565b604082019050919050565b6000602082019050818103600083015261126481611228565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006112a16020836111c8565b91506112ac8261126b565b602082019050919050565b600060208201905081810360008301526112d081611294565b9050919050565b600069ffffffffffffffffffff82169050919050565b6112f6816112d7565b811461130157600080fd5b50565b600081519050611313816112ed565b92915050565b6000819050919050565b61132c81611319565b811461133757600080fd5b50565b60008151905061134981611323565b92915050565b600080600080600060a0868803121561136b5761136a610d06565b5b600061137988828901611304565b955050602061138a8882890161133a565b945050604061139b88828901610fe5565b93505060606113ac88828901610fe5565b92505060806113bd88828901611304565b9150509295509295909350565b60006113d582611319565b91506113e083611319565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561141f5761141e610f5c565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561145c5761145b610f5c565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561149957611498610f5c565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156114d6576114d5610f5c565b5b82820290509291505056fea264697066735822122039bf3cb0cdeb3a29df2446b6758ece052b430165277ca0d8fe6a002e483b436d64736f6c63430008080033",
  "deployedBytecode": "0x6080604052600436106100ab5760003560e01c8063741bef1a11610064578063741bef1a146101d65780638da5cb5b14610201578063b6b55f251461022c578063d84549d714610248578063f2fde38b14610273578063fc0c546a1461029c576100b2565b80631b05ab79146100b457806321df0da7146100f15780632e1a7d4d1461011c578063527d59061461014557806356bfdaf514610182578063715018a6146101bf576100b2565b366100b257005b005b3480156100c057600080fd5b506100db60048036038101906100d69190610d41565b6102c7565b6040516100e89190610d7d565b60405180910390f35b3480156100fd57600080fd5b506101066102e3565b6040516101139190610dd9565b60405180910390f35b34801561012857600080fd5b50610143600480360381019061013e9190610d41565b61030d565b005b34801561015157600080fd5b5061016c60048036038101906101679190610e20565b6106a9565b6040516101799190610e8b565b60405180910390f35b34801561018e57600080fd5b506101a960048036038101906101a49190610d41565b610716565b6040516101b69190610d7d565b60405180910390f35b3480156101cb57600080fd5b506101d461075e565b005b3480156101e257600080fd5b506101eb610772565b6040516101f89190610f05565b60405180910390f35b34801561020d57600080fd5b50610216610798565b6040516102239190610dd9565b60405180910390f35b61024660048036038101906102419190610d41565b6107c1565b005b34801561025457600080fd5b5061025d6109dc565b60405161026a9190610d7d565b60405180910390f35b34801561027f57600080fd5b5061029a60048036038101906102959190610e20565b610a1c565b005b3480156102a857600080fd5b506102b1610aa0565b6040516102be9190610f41565b60405180910390f35b60006102d16109dc565b826102dc9190610f8b565b9050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154811115610389576040517f14f310c900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016103e59190610dd9565b60206040518083038186803b1580156103fd57600080fd5b505afa158015610411573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104359190610ffa565b101561046d576040517f0707d44600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006104a3670de0b6b3a7640000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610ac6565b670de0b6b3a7640000836104b79190610f8b565b6104c19190611056565b9050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639dc29fac33846040518363ffffffff1660e01b8152600401610520929190611087565b602060405180830381600087803b15801561053a57600080fd5b505af115801561054e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061057291906110e8565b5080600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160008282546105c59190611115565b9250508190555081600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101600082825461061e9190611115565b925050819055503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015801561066b573d6000803e3d6000fd5b507f56ca301a9219608c91e7bcee90e083c19671d2cdcc96752c7af291cee5f9c8c8818360405161069d929190611149565b60405180910390a15050565b6106b1610cec565b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806040016040529081600082015481526020016001820154815250509050919050565b600061074c670de0b6b3a7640000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610ac6565b826107579190611056565b9050919050565b610766610b02565b6107706000610b80565b565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b3481146107fa576040517f201c04ab00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061082834600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610ac6565b9050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1933836040518363ffffffff1660e01b8152600401610887929190611087565b602060405180830381600087803b1580156108a157600080fd5b505af11580156108b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d991906110e8565b5081600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001600082825461092c9190611172565b9250508190555080600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160008282546109859190611172565b925050819055507fa3af609bf46297028ce551832669030f9effef2b02606d02cbbcc40fe6b47c5582670de0b6b3a7640000836109c29190611056565b6040516109d0929190611149565b60405180910390a15050565b600080610a13670de0b6b3a7640000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610ac6565b90508091505090565b610a24610b02565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610a94576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a8b9061124b565b60405180910390fd5b610a9d81610b80565b50565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080610ad283610c44565b90506000670de0b6b3a76400008583610aeb9190610f8b565b610af59190611056565b9050809250505092915050565b610b0a610ce4565b73ffffffffffffffffffffffffffffffffffffffff16610b28610798565b73ffffffffffffffffffffffffffffffffffffffff1614610b7e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b75906112b7565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015610c8d57600080fd5b505afa158015610ca1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc5919061134f565b5050509150506402540be40081610cdc91906113ca565b915050919050565b600033905090565b604051806040016040528060008152602001600081525090565b600080fd5b6000819050919050565b610d1e81610d0b565b8114610d2957600080fd5b50565b600081359050610d3b81610d15565b92915050565b600060208284031215610d5757610d56610d06565b5b6000610d6584828501610d2c565b91505092915050565b610d7781610d0b565b82525050565b6000602082019050610d926000830184610d6e565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610dc382610d98565b9050919050565b610dd381610db8565b82525050565b6000602082019050610dee6000830184610dca565b92915050565b610dfd81610db8565b8114610e0857600080fd5b50565b600081359050610e1a81610df4565b92915050565b600060208284031215610e3657610e35610d06565b5b6000610e4484828501610e0b565b91505092915050565b610e5681610d0b565b82525050565b604082016000820151610e726000850182610e4d565b506020820151610e856020850182610e4d565b50505050565b6000604082019050610ea06000830184610e5c565b92915050565b6000819050919050565b6000610ecb610ec6610ec184610d98565b610ea6565b610d98565b9050919050565b6000610edd82610eb0565b9050919050565b6000610eef82610ed2565b9050919050565b610eff81610ee4565b82525050565b6000602082019050610f1a6000830184610ef6565b92915050565b6000610f2b82610ed2565b9050919050565b610f3b81610f20565b82525050565b6000602082019050610f566000830184610f32565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610f9682610d0b565b9150610fa183610d0b565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610fda57610fd9610f5c565b5b828202905092915050565b600081519050610ff481610d15565b92915050565b6000602082840312156110105761100f610d06565b5b600061101e84828501610fe5565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061106182610d0b565b915061106c83610d0b565b92508261107c5761107b611027565b5b828204905092915050565b600060408201905061109c6000830185610dca565b6110a96020830184610d6e565b9392505050565b60008115159050919050565b6110c5816110b0565b81146110d057600080fd5b50565b6000815190506110e2816110bc565b92915050565b6000602082840312156110fe576110fd610d06565b5b600061110c848285016110d3565b91505092915050565b600061112082610d0b565b915061112b83610d0b565b92508282101561113e5761113d610f5c565b5b828203905092915050565b600060408201905061115e6000830185610d6e565b61116b6020830184610d6e565b9392505050565b600061117d82610d0b565b915061118883610d0b565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156111bd576111bc610f5c565b5b828201905092915050565b600082825260208201905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006112356026836111c8565b9150611240826111d9565b604082019050919050565b6000602082019050818103600083015261126481611228565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006112a16020836111c8565b91506112ac8261126b565b602082019050919050565b600060208201905081810360008301526112d081611294565b9050919050565b600069ffffffffffffffffffff82169050919050565b6112f6816112d7565b811461130157600080fd5b50565b600081519050611313816112ed565b92915050565b6000819050919050565b61132c81611319565b811461133757600080fd5b50565b60008151905061134981611323565b92915050565b600080600080600060a0868803121561136b5761136a610d06565b5b600061137988828901611304565b955050602061138a8882890161133a565b945050604061139b88828901610fe5565b93505060606113ac88828901610fe5565b92505060806113bd88828901611304565b9150509295509295909350565b60006113d582611319565b91506113e083611319565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561141f5761141e610f5c565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561145c5761145b610f5c565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561149957611498610f5c565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156114d6576114d5610f5c565b5b82820290509291505056fea264697066735822122039bf3cb0cdeb3a29df2446b6758ece052b430165277ca0d8fe6a002e483b436d64736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "deposit(uint256)": {
        "params": {
          "amountToDeposit": "Ether sent to the contract by the user"
        }
      },
      "estimateCollateralAmount(uint256)": {
        "params": {
          "repaymentAmount": "the amount of stable coin that would be repaid"
        },
        "returns": {
          "collateralAmount": "the estimated amount of a vault's collateral that would be returned "
        }
      },
      "estimateTokenAmount(uint256)": {
        "params": {
          "depositAmount": "the amount of ETH that would be deposited"
        },
        "returns": {
          "tokenAmount": " the estimated amount of stablecoin that would be minted"
        }
      },
      "getLender(address)": {
        "params": {
          "userAddress": "fetches details of this address"
        },
        "returns": {
          "lender": "returns the lender's values"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdraw(uint256)": {
        "params": {
          "repaymentAmount": "The amount the user is paying back to the contract to redeem collateral"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "deposit(uint256)": {
        "notice": "Let's user to deposit ETH collateral in exchange for stablecoin"
      },
      "estimateCollateralAmount(uint256)": {
        "notice": "Returns an estimate of how much collateral could be withdrawn for a given amount of stablecoin"
      },
      "estimateTokenAmount(uint256)": {
        "notice": "Returns an estimate on how much stable coin could be minted at the current rate"
      },
      "getLender(address)": {
        "notice": "gets details of each lender"
      },
      "withdraw(uint256)": {
        "notice": "Let's users withdraw collateral intially submitted"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 53,
        "contract": "contracts/Lender.sol:Lender",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 891,
        "contract": "contracts/Lender.sol:Lender",
        "label": "lenders",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_struct(LenderEntity)1271_storage)"
      },
      {
        "astId": 894,
        "contract": "contracts/Lender.sol:Lender",
        "label": "token",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(StableCoin)1264"
      },
      {
        "astId": 897,
        "contract": "contracts/Lender.sol:Lender",
        "label": "priceFeed",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_contract(StableCoin)1264": {
        "encoding": "inplace",
        "label": "contract StableCoin",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(LenderEntity)1271_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ILender.LenderEntity)",
        "numberOfBytes": "32",
        "value": "t_struct(LenderEntity)1271_storage"
      },
      "t_struct(LenderEntity)1271_storage": {
        "encoding": "inplace",
        "label": "struct ILender.LenderEntity",
        "members": [
          {
            "astId": 1268,
            "contract": "contracts/Lender.sol:Lender",
            "label": "collateralETH",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1270,
            "contract": "contracts/Lender.sol:Lender",
            "label": "debtAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}