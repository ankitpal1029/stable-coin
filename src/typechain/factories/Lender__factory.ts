/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Lender, LenderInterface } from "../Lender";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract StableCoin",
        name: "_token",
        type: "address",
      },
      {
        internalType: "address",
        name: "priceFeedAddress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "InadequeteTokenBalance",
    type: "error",
  },
  {
    inputs: [],
    name: "IncorrectETHAmount",
    type: "error",
  },
  {
    inputs: [],
    name: "WithdrawLimitExceeded",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "collateralETHDeposited",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountUSDMinted",
        type: "uint256",
      },
    ],
    name: "Deposit",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "collateralETHWithdraw",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountUSDBurned",
        type: "uint256",
      },
    ],
    name: "Withdraw",
    type: "event",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amountToDeposit",
        type: "uint256",
      },
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "repaymentAmount",
        type: "uint256",
      },
    ],
    name: "estimateCollateralAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "collateralAmount",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "depositAmount",
        type: "uint256",
      },
    ],
    name: "estimateTokenAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "tokenAmount",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getEthUSDPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "userAddress",
        type: "address",
      },
    ],
    name: "getLender",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "collateralETH",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "debtAmount",
            type: "uint256",
          },
        ],
        internalType: "struct ILender.LenderEntity",
        name: "lender",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getToken",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "priceFeed",
    outputs: [
      {
        internalType: "contract AggregatorV3Interface",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "token",
    outputs: [
      {
        internalType: "contract StableCoin",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "repaymentAmount",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620017ca380380620017ca83398181016040528101906200003791906200025c565b620000576200004b620000e160201b60201c565b620000e960201b60201c565b81600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050620002a3565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001df82620001b2565b9050919050565b6000620001f382620001d2565b9050919050565b6200020581620001e6565b81146200021157600080fd5b50565b6000815190506200022581620001fa565b92915050565b6200023681620001d2565b81146200024257600080fd5b50565b60008151905062000256816200022b565b92915050565b60008060408385031215620002765762000275620001ad565b5b6000620002868582860162000214565b9250506020620002998582860162000245565b9150509250929050565b61151780620002b36000396000f3fe6080604052600436106100ab5760003560e01c8063741bef1a11610064578063741bef1a146101d65780638da5cb5b14610201578063b6b55f251461022c578063d84549d714610248578063f2fde38b14610273578063fc0c546a1461029c576100b2565b80631b05ab79146100b457806321df0da7146100f15780632e1a7d4d1461011c578063527d59061461014557806356bfdaf514610182578063715018a6146101bf576100b2565b366100b257005b005b3480156100c057600080fd5b506100db60048036038101906100d69190610d41565b6102c7565b6040516100e89190610d7d565b60405180910390f35b3480156100fd57600080fd5b506101066102e3565b6040516101139190610dd9565b60405180910390f35b34801561012857600080fd5b50610143600480360381019061013e9190610d41565b61030d565b005b34801561015157600080fd5b5061016c60048036038101906101679190610e20565b6106a9565b6040516101799190610e8b565b60405180910390f35b34801561018e57600080fd5b506101a960048036038101906101a49190610d41565b610716565b6040516101b69190610d7d565b60405180910390f35b3480156101cb57600080fd5b506101d461075e565b005b3480156101e257600080fd5b506101eb610772565b6040516101f89190610f05565b60405180910390f35b34801561020d57600080fd5b50610216610798565b6040516102239190610dd9565b60405180910390f35b61024660048036038101906102419190610d41565b6107c1565b005b34801561025457600080fd5b5061025d6109dc565b60405161026a9190610d7d565b60405180910390f35b34801561027f57600080fd5b5061029a60048036038101906102959190610e20565b610a1c565b005b3480156102a857600080fd5b506102b1610aa0565b6040516102be9190610f41565b60405180910390f35b60006102d16109dc565b826102dc9190610f8b565b9050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154811115610389576040517f14f310c900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016103e59190610dd9565b60206040518083038186803b1580156103fd57600080fd5b505afa158015610411573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104359190610ffa565b101561046d576040517f0707d44600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006104a3670de0b6b3a7640000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610ac6565b670de0b6b3a7640000836104b79190610f8b565b6104c19190611056565b9050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639dc29fac33846040518363ffffffff1660e01b8152600401610520929190611087565b602060405180830381600087803b15801561053a57600080fd5b505af115801561054e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061057291906110e8565b5080600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160008282546105c59190611115565b9250508190555081600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101600082825461061e9190611115565b925050819055503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015801561066b573d6000803e3d6000fd5b507f56ca301a9219608c91e7bcee90e083c19671d2cdcc96752c7af291cee5f9c8c8818360405161069d929190611149565b60405180910390a15050565b6106b1610cec565b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806040016040529081600082015481526020016001820154815250509050919050565b600061074c670de0b6b3a7640000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610ac6565b826107579190611056565b9050919050565b610766610b02565b6107706000610b80565b565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b3481146107fa576040517f201c04ab00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061082834600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610ac6565b9050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1933836040518363ffffffff1660e01b8152600401610887929190611087565b602060405180830381600087803b1580156108a157600080fd5b505af11580156108b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d991906110e8565b5081600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001600082825461092c9190611172565b9250508190555080600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160008282546109859190611172565b925050819055507fa3af609bf46297028ce551832669030f9effef2b02606d02cbbcc40fe6b47c5582670de0b6b3a7640000836109c29190611056565b6040516109d0929190611149565b60405180910390a15050565b600080610a13670de0b6b3a7640000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610ac6565b90508091505090565b610a24610b02565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610a94576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a8b9061124b565b60405180910390fd5b610a9d81610b80565b50565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080610ad283610c44565b90506000670de0b6b3a76400008583610aeb9190610f8b565b610af59190611056565b9050809250505092915050565b610b0a610ce4565b73ffffffffffffffffffffffffffffffffffffffff16610b28610798565b73ffffffffffffffffffffffffffffffffffffffff1614610b7e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b75906112b7565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015610c8d57600080fd5b505afa158015610ca1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc5919061134f565b5050509150506402540be40081610cdc91906113ca565b915050919050565b600033905090565b604051806040016040528060008152602001600081525090565b600080fd5b6000819050919050565b610d1e81610d0b565b8114610d2957600080fd5b50565b600081359050610d3b81610d15565b92915050565b600060208284031215610d5757610d56610d06565b5b6000610d6584828501610d2c565b91505092915050565b610d7781610d0b565b82525050565b6000602082019050610d926000830184610d6e565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610dc382610d98565b9050919050565b610dd381610db8565b82525050565b6000602082019050610dee6000830184610dca565b92915050565b610dfd81610db8565b8114610e0857600080fd5b50565b600081359050610e1a81610df4565b92915050565b600060208284031215610e3657610e35610d06565b5b6000610e4484828501610e0b565b91505092915050565b610e5681610d0b565b82525050565b604082016000820151610e726000850182610e4d565b506020820151610e856020850182610e4d565b50505050565b6000604082019050610ea06000830184610e5c565b92915050565b6000819050919050565b6000610ecb610ec6610ec184610d98565b610ea6565b610d98565b9050919050565b6000610edd82610eb0565b9050919050565b6000610eef82610ed2565b9050919050565b610eff81610ee4565b82525050565b6000602082019050610f1a6000830184610ef6565b92915050565b6000610f2b82610ed2565b9050919050565b610f3b81610f20565b82525050565b6000602082019050610f566000830184610f32565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610f9682610d0b565b9150610fa183610d0b565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610fda57610fd9610f5c565b5b828202905092915050565b600081519050610ff481610d15565b92915050565b6000602082840312156110105761100f610d06565b5b600061101e84828501610fe5565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061106182610d0b565b915061106c83610d0b565b92508261107c5761107b611027565b5b828204905092915050565b600060408201905061109c6000830185610dca565b6110a96020830184610d6e565b9392505050565b60008115159050919050565b6110c5816110b0565b81146110d057600080fd5b50565b6000815190506110e2816110bc565b92915050565b6000602082840312156110fe576110fd610d06565b5b600061110c848285016110d3565b91505092915050565b600061112082610d0b565b915061112b83610d0b565b92508282101561113e5761113d610f5c565b5b828203905092915050565b600060408201905061115e6000830185610d6e565b61116b6020830184610d6e565b9392505050565b600061117d82610d0b565b915061118883610d0b565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156111bd576111bc610f5c565b5b828201905092915050565b600082825260208201905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006112356026836111c8565b9150611240826111d9565b604082019050919050565b6000602082019050818103600083015261126481611228565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006112a16020836111c8565b91506112ac8261126b565b602082019050919050565b600060208201905081810360008301526112d081611294565b9050919050565b600069ffffffffffffffffffff82169050919050565b6112f6816112d7565b811461130157600080fd5b50565b600081519050611313816112ed565b92915050565b6000819050919050565b61132c81611319565b811461133757600080fd5b50565b60008151905061134981611323565b92915050565b600080600080600060a0868803121561136b5761136a610d06565b5b600061137988828901611304565b955050602061138a8882890161133a565b945050604061139b88828901610fe5565b93505060606113ac88828901610fe5565b92505060806113bd88828901611304565b9150509295509295909350565b60006113d582611319565b91506113e083611319565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561141f5761141e610f5c565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561145c5761145b610f5c565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561149957611498610f5c565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156114d6576114d5610f5c565b5b82820290509291505056fea264697066735822122039bf3cb0cdeb3a29df2446b6758ece052b430165277ca0d8fe6a002e483b436d64736f6c63430008080033";

export class Lender__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    _token: string,
    priceFeedAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Lender> {
    return super.deploy(
      _token,
      priceFeedAddress,
      overrides || {}
    ) as Promise<Lender>;
  }
  getDeployTransaction(
    _token: string,
    priceFeedAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _token,
      priceFeedAddress,
      overrides || {}
    );
  }
  attach(address: string): Lender {
    return super.attach(address) as Lender;
  }
  connect(signer: Signer): Lender__factory {
    return super.connect(signer) as Lender__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LenderInterface {
    return new utils.Interface(_abi) as LenderInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Lender {
    return new Contract(address, _abi, signerOrProvider) as Lender;
  }
}
